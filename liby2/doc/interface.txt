Y2Component interface

-> include/y2/Y2Component.h

The component interface is the generic link between UI, WFM, and
SCR components. The Y2ComponentBroker.cc determines where the component
is located and sets up the communication.
Components come in different 'flavours':
- Plugin (dynamically loaded at runtime)
- Program (external program)
- Remote (remote component, accessible via rlogin, rsh, su, sudo, or telnet)
- Script (.ycp code)
- Serial (remote component, accessible via serial line)
- Stdio (plain stdio link)

The component interface handles the different communication requirements,
it's completely transparent to the application.


Components can be clients or servers. Clients 'take over control' and
drive the execution. Servers offer services to the clients.
UI and SCR are servers, WFM is a client.

WFM is the master and keeps control.
SCR is dumb
UI is intelligent, since it runs an interpreter of itself

N.B.: SCR is special as it has various sub-components, called agents. The
interface to the SCR uses paths to identify the agents. The SCR<->agent
communication is also done with help of the component interface.


I. Common members

~Y2Component()
  destructor

string name() const
  returns name of component


II. Server members

YCPValue evaluate(const YCPValue& command);
  evaluate a command and return its result.
  !! used also for clients callbacks !!

void result(const YCPValue& result);
  finish server, return final result and shut down

void setServerOptions(int argc, char **argv);
  set options for server execution, usually called befor evaluate()

void setModulename(string modulename, Y2Component *user_interface);
void setTextdomain(string textdomain, Y2Component *user_interface);
  used to inform UI about the current module and textdomain.
  (not clear why user_interface is passed here).


III. Client members

YCPValue doActualWork(const YCPList& arglist, Y2Component *user_interface);
  start client execution (with arguments)
  user_interface is passed for direct client->UI communication.

YCPValue evaluate(const YCPValue& command);
  execute command in client, used for UI->client communication.
  !! same as server member !!

IV. Misc

YCPValue callModule(string modulename, const YCPList& arglist, Y2Component *user_interface); 
  direct interface to ScriptComponent.

SCRAgent * getSCRAgent ();
  Used for inter-agent communication.
  The SCR 'main' component uses the component architecture to communicate
  with the agents. This functions gives direct access to the agent (without
  SCR main interference) for agent-agent communication.
