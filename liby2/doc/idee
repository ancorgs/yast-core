/usr/lib/YaST2/modules: Alle module
/usr/lib/YaST2/servers: Alle server
/usr/lib/YaST2/preload: Include files
/usr/lib/YaST2/bundles: Zusammengebackene komponenten
/usr/lib/YaST2/specs:   Beschreibung von Komponenten

/usr/lib/YaST2/bin:	Links auf die bundles, servers und modules.


GF liest und parst scriptfiles.
GF liest und parst parameter.
GF wickelt Kommunikation ueber Netz und Pipes ab.

y2wfm Ist normales Modul. Als Parameter braucht es ein Script.

y2wfm + Script ist auch normales Modul.

gf erledigt Script laden aus Datei bzw. von stdin lesen.

================================================================================

y2gf [ Server ] [ Client [ ClientOptions ] ] [-s] [ -p scriptfile ] [ -e script ] [ ServerOptions ]

Die erste ServerOption beginnt immer mit einem '-'.

Wenn ClientOptions angegeben werden, dann natuerlich auch
ein Client.

ClientOptions beginnen NIE mit einem '-'.

- Man kann auch eine Komponente direkt angeben, wenn es ein Link
  auf /bin/y2gf ist. Das gf erkennt an argv[0] den Namen der
  ersten Komponente.

Semantik und Auswertung:

1. Mindestens eine Komponente muss angegeben werden. Wenn man einfach
   nur y2gf eintippt, kommt ein Hilfetext.

 . Der Name der ersten Komponente wird festgestellt. Wenn y2gf als y2gf
   gestartet wurde, ist die argv[1], ansonsten argv[0], ohne das fuehrende
   y2.

 . Es wird festgestellt, ob es sich um einen Server, oder um einen 
   Client handelt. Remote-Bezeichnungen mit Host:Komponente, bzw,
   Host:Portnummer:Komponente sind immer Clients. Komponenten in 
   /lib/YaST2/modules sind immer Clients, in /lib/YaST2/servers
   sind nur Server, bei builtin Komponenten geben diese Auskunft,
   was sie sind.

 . a) Naechstes Argument beginnt mit '-': Kein Client wurde angegeben,
      es wird auf -p und -e geprueft. Die restlichen Optionen gehen
      an den Server weiter.
   b) Naechstes Argument beginnt mit Buchstabe: Es handelt sich
      um die Spezifikation des Clients. Erlaubt sind Modulname,
      Hostname:Modulname, absoluter oder relativer Dateipfad.

 . Wenn es einen Client gibt, wird dieser gesucht. Alle Argumente
   bis zum Ende der Zeile oder bis zum ersten Argument, dass mit '-'
   beginnt, sind Optionen fuer den Client. Sie werden zusammen mit
   dem Modulnamen zu einem YCP Term zusammengebaut und dem Modul
   uebergeben. @Filename bedeutet, dass das angegebenen File geparst
   wird und daraus weitere Parameter entnommen werden.

 . Weitere Optionen werden ausgewertet:

   -s    Eine einzelne Option fuer den Client wird in Form eines YCP
         Terms von stdin geparst. Dies ist nur erlaubt, wenn
         vorher keine ClientOptions angegeben wurden.

   -p SF Das Scriptfile SF wird geoffnet, geparst und dem Server
         zur Ausfuehrung geschickt.

   -e V  Der YCP Ausdruck V wird dem Server zur Ausfuehrung 
         geschickt.
   
------------------------------------------------------------
Umgang mit dem WFM:

Der WFM ist ein generisches Modul. Er bekommt als Parameter
Ein Script und einen Paramterterm.

Zusaetzlich gibt es den ComponentCreator, der zusammen aus
einem Script und dem WFM ein normales Modul macht.

y2wfm '{ _debug(Args()); }' 17 18

y2wfm @scriptfile 17 18 
