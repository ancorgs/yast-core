{
    string cwd() {
        map out = (map) SCR::Execute(.target.bash_output, "pwd");
        return deletechars(out["stdout"]:"", "\n");
    }

    any with_scr_root(string root, any () action) {
        string component = sformat("chroot=%1:scr", root);
        boolean check_version = false;
        integer handle = WFM::SCROpen(component, check_version);
        WFM::SCRSetDefault(handle);

        any result = action();

        WFM::SCRSetDefault(0);
        WFM::SCRClose(handle);
        return result;
    }

    boolean test_anyagent() {
        SCR::RegisterAgent(
          .tested,
          `ag_anyagent(
            `Description (
              `File ("/toplevel/target_root"),
              "#\n",                // Comment
              true,                 // read-only
              `List (
                `String ("^ \n"),
                " "
              )
            )
          )
        );

        any read = SCR::Read(.tested);

        any expected = ["BOOT_IMAGE=fbdev", "ro", "root=801"];
        y2milestone ("Expected: %1", expected);
        y2milestone ("Read:     %1", read);
        return read == expected;
    }

    string root = sformat("%1/data", cwd());
    return with_scr_root(root, test_anyagent);
}
