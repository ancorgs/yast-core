<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN">
<html>
<style type="text/css">
<!--
tt { color:#000000; }
//-->
</style>
<head>
  <title>ycp inside / Quoting</title>
</head>
<body text="#008000">


<div align="center"><h1>Quotings in YCP</h1></div>
<div align="center"><table cellpadding=3 cellspacing=10 width=95% >
<tr>
   <td>
   <p>To understand a YCP script, it is <strong>strongly recommended</strong> to set the correct quotings.<br><p>
   </td>
<tr>
   <th bgcolor=#62af30 >
   <font size=+1 color="White">Practical approach for beginners:
   </th>
</tr>
<tr>
    <td>
    Use as less backquotes as possible
    <ul>
	<li>Do not use the datatype <a href="YCP-statements.html">symbol</a>, use <a href="YCP-statements.html">string</a> instead</li>
	<li>Use always a backquote, if you call a builtin/define via UI or SCR
		<br>Example:  <tt>SCR(<b><u>`</u></b>Read(...))</tt>   or  <tt>UI(<b> <u>`</u></b>DisplayMessage())</tt>
	<li>Use always double backquotes, where the examples use backquotes: In <tt>UI(``{</tt>, <tt>define</tt>, 
	<tt>foreach</tt>, <tt>mapmap</tt>, <tt>listmap</tt> ... and similar builtins</li>
   </ul>
   <p>
   <td>
</tr>
<tr>
   <th bgcolor=#62af30 >
   <font size=+1 color="White">YCP Backquotes in detail
   </th>
</tr>
<tr>
   <td>
   There are three different backquote types:
   <ul>
   <li><a href="#symbol">1. Tag a symbol: `<em>symbol</em></a></li>
   <li><a href="#term2"  >2. Do not evaluate: ``(<em>term)l</em> or ``{<em>term</em>}</a></li>
   <li><a href="#term1"  >3. Evaluate arguments, not the term:`<em>term</em></a></li>
   </ul>
    </td>
</tr>
<tr> 
    <th bgcolor=#62af30>
    <font color="White"><a name="symbol">1. Tag a symbol: `<em>symbol</em></font></a>
    </th>
</tr>
 <tr>
   <td>
   Here the single quote shows that the following string is a symbol.
   The single backquote is needed, to differentiate a variable and a symbol.
   <br>See <a href="YCP-statements.html">symbol</a>
   <p>Example:   <tt>`true</tt>, <tt>`easy</tt> 
   </td>
</tr>
<tr>
  <th bgcolor=#62af30 >
  <font color="White"><a name="term1">2. Do not evaluate:``(<em>term)l</em> or ``{<em>term</em>}</a>
  </th>
</tr>
<tr>
   <td>Here the single quote prevents the term from being evaluated. This behaviour is needed: 
   <ul><li>if the written code
    should be evaluated more than once like a <tt>define</tt> or for all members of
   a list/map like <tt>foreach, listmap, mapmap ...</tt></li>
   <li> you send your code to a client, and the client should execute it, like
   <tt>UI(``{..}) </tt></li> 
</tr>
<tr>
  <th bgcolor=#62af30 >
  <font color="White"><a name="term1">3. Evaluate arguments, not the term:`<em>term</em></a>
  </th>
</tr>
<tr>
   <td>Here the single quote shows interpreter, that the argumets should be evaluated, but the term is not evaluated.
   This behaviour is needed, if we call a UI define from the WFM, and want to pass arguments from a variable.
   <ul>
   <li>If we write <tt>UI(``(DisplayMessage(my_message)))</tt> The complete string is send to 
   the UI and the UI correctly evaluates
   the define <font color="Black"><tt>DisplayMessage</tt></font>. Then it trys to evaluate
    <tt>my_message</tt>, and fails, because this is a variable in 
   the WFM context. 
   </li>
   <li>If we write <tt>UI(DisplayMessage(my_message))</tt>, the WFM trys to evaluate DisplayMessage 
   and fails, because this a define in the    UI.</li> 
   <li>If we write <tt>UI(`DisplayMessage(my_message))</tt>, the WFM only evaluates the arguments 
   of the term: <tt>my_message</tt> and sends for example
   <tt>DisplayMessage("Hello Wold")</tt> to the UI, the UI evalutes DisplayMessage, and the "hello Worl" is shown.</li>
</td>
</tr>
</table></div>
</body>
</html>



