
# ---------------------------------------------------------
#
#  Filename:    Select_List.ycp
#
#  Purpose:     test cases for YCP 'select' on lists
#
#  Creator:     jd@suse.de
#
#  Maintainer:  jd@suse.de
#
# ---------------------------------------------------------

// Gets the i'th value of a list or term. The first value has the index 0.
// The call select([1,2,3], 1) thus returns 2. Returns nil if the
// index is invalid.
// For a map, the returned value is a list of two values [key,value]

( select([1,2,3], 1, nilinteger) == 2 )
{
    list  node1 = [ 1, 2 ];
    list  node2 = [ 3, 4 ];
    list  node3 = [ 5, 6 ];
    list  node4 = [ node2, node3 ];
    list  node5 = [ node1, node4 ];
    list  node6 = [ 7 ];
    list  node7 = [ node5, node6 ];

    return( (select( node7, 0, nillist ) == node5 )
	   && (node7[0]:nillist == node5));
}

{
    list  node1 = [ 1, 2 ];
    list  node2 = [ 3, 4 ];
    list  node3 = [ 5, 6 ];
    list  node4 = [ node2, node3 ];
    list  node5 = [ node1, node4 ];
    list  node6 = [ 7 ];
    list  node7 = [ node5, node6 ];

    return( (select( select( node7, 0, nillist ), 1, nillist ) == node4 )
	   && (node7[0,1]:nillist == node4));
}

{
    list  node1 = [ 1, 2 ];
    list  node2 = [ 3, 4 ];
    list  node3 = [ 5, 6 ];
    list  node4 = [ node2, node3 ];
    list  node5 = [ node1, node4 ];
    list  node6 = [ 7 ];
    list  node7 = [ node5, node6 ];

    return( (select( select( select( node7, 0, nillist ), 1, nillist ), 0, nillist ) == node2 )
	   && (node7[0,1,0]:nillist == node2));
}

{
    list  node1 = [ 1, 2 ];
    list  node2 = [ 3, 4 ];
    list  node3 = [ 5, 6 ];
    list  node4 = [ node2, node3 ];
    list  node5 = [ node1, node4 ];
    list  node6 = [ 7 ];
    list  node7 = [ node5, node6 ];

    return( (select( select( select( select( node7, 0, nillist ), 1, nillist ), 1, nillist ), 1, nillist ) == 6 )
	   && (node7[0,1,1,1]:nilinteger == 6));
}

