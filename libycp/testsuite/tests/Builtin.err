Parsed:
----------------------------------------------------------------------
``((1 + 2))
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
``(name)
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
``{
  return (3 + 4);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return 7;
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
(size (#[DEADBEEF]) == 4)
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  define comparison(boolean maximum, integer Int1, integer Int2) ``{
  if ((maximum == true)) {
  if ((Int1 >= Int2)) {
  return Int1;
}
 else {
  return Int2;
}
}
 else {
  if ((Int1 <= Int2)) {
  return Int1;
}
 else {
  return Int2;
}
}
}
;
  define maximum(integer Int1, integer Int2) ``{
  return comparison (true, Int1, Int2);
}
;
  define minimum(integer Int1, integer Int2) ``{
  return comparison (false, Int1, Int2);
}
;
  _dump_scope ();
  return (((maximum (5, minimum (7, 3)) == 5) && (maximum (5, 7) == maximum (7, 5))) && (minimum (5, 7) == minimum (7, 5)));
}
----------------------------------------------------------------------
-- level 1 --
   comparison(boolean maximum, integer Int1, integer Int2)                 = {
  if ((maximum == true)) {
  if ((Int1 >= Int2)) {
  return Int1;
}
 else {
  return Int2;
}
}
 else {
  if ((Int1 <= Int2)) {
  return Int1;
}
 else {
  return Int2;
}
}
}
   maximum(integer Int1, integer Int2)                 = {
  return comparison (true, Int1, Int2);
}
   minimum(integer Int1, integer Int2)                 = {
  return comparison (false, Int1, Int2);
}
-- end --
Parsed:
----------------------------------------------------------------------
{
  define comparison(boolean maximum, integer Int1, integer Int2) ``{
  if ((maximum == true)) {
  if ((Int1 >= Int2)) {
  return Int1;
}
 else {
  return Int2;
}
}
 else {
  if ((Int1 <= Int2)) {
  return Int1;
}
 else {
  return Int2;
}
}
}
;
  define maximum(integer Int1, integer Int2) ``{
  return comparison (true, Int1, Int2);
}
;
  define minimum(integer Int1, integer Int2) ``{
  return comparison (false, Int1, Int2);
}
;
  return ((maximum (5, 7) != minimum (5, 7)) && (maximum (7, 5) != minimum (5, 7)));
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return "test cases for define finished";
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  map `node1 = $[1:"Austria", 2:"Belgium"];
  map `node2 = $[3:"China", 4:"D-Nation"];
  map `node3 = $[5:"England", 6:"France"];
  map `node4 = $[9:node2, 10:node3];
  map `node5 = $[8:node1, 11:node4];
  map `node6 = $[7:"Greece"];
  map `node7 = $[12:node5, 13:node6];
  return (node7 == $[12:$[8:$[1:"Austria", 2:"Belgium"], 11:$[9:$[3:"China", 4:"D-Nation"], 10:$[5:"England", 6:"France"]]], 13:$[7:"Greece"]]);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
(contains ([1, 2, 3], -1) == false)
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
(contains ([1, 2, 3], 0) == false)
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
contains ([1, 2, 3], 2)
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `node1 = [1, 2];
  list `node2 = [3, 4];
  list `node3 = [5, 6];
  list `node4 = [node2, node3];
  list `node5 = [node1, node4];
  list `node6 = [7];
  list `node7 = [node5, node6];
  return (contains (node7, node5) == true);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `node1 = [1, 2];
  list `node2 = [3, 4];
  list `node3 = [5, 6];
  list `node4 = [node2, node3];
  list `node5 = [node1, node4];
  list `node6 = [7];
  list `node7 = [node5, node6];
  return (contains (node7, node1) == false);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `node1 = [1, 2];
  list `node2 = [3, 4];
  list `node3 = [5, 6];
  list `node4 = [node2, node3];
  list `node5 = [node1, node4];
  list `node6 = [7];
  list `node7 = [node5, node6];
  return node7;
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return "test case contains finished";
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  map `MyMap = $[0:"Austria", 2:"China", "1":"Belgium"];
  return (((((haskey (MyMap, 0) && haskey (MyMap, "1")) && haskey (MyMap, 2)) && (haskey (MyMap, false) == false)) && (haskey (MyMap, 2.00000000000000) == false)) && (haskey (MyMap, "") == false));
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return "test case haskey finished";
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  map `MyMap = $[0:"Austria", 2:"China", "1":"Belgium"];
  return (MyMap == $[0:"Austria", 2:"China", "1":"Belgium"]);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  map `MyMap = $[0:"Austria", 2:"China", "1":"Belgium"];
  map `NewMap = $[];
  `NewMap = (add (MyMap, 7, "Hungary"));
  return (NewMap == $[0:"Austria", 2:"China", 7:"Hungary", "1":"Belgium"]);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  map `MyMap = $[0:"Austria", 2:"China", "1":"Belgium"];
  map `NewMap = $[];
  `NewMap = (add (MyMap, 2, "Estonia"));
  return (NewMap == $[0:"Austria", 2:"Estonia", "1":"Belgium"]);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  map `MyMap = $[0:"Austria", 2:"China", "1":"Belgium"];
  map `NewMap = $[];
  `MyMap = ($[]);
  `NewMap = (add (MyMap, "7", "Hungary"));
  return (NewMap == $["7":"Hungary"]);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return "test case add for maps finished";
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `MyList = ["Austria", "Belgium", "China", `D_Nation, "England", "France", "Greece"];
  list `NewList = [];
  return MyList;
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `MyList = ["Austria", "Belgium", "China", `D_Nation, "England", "France", "Greece"];
  list `NewList = [];
  `NewList = (add (MyList, .Hungary));
  return ((size (MyList) == 7) && (select (NewList, size (MyList), nil) == .Hungary));
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `MyList = ["Austria", "Belgium", "China", `D_Nation, "England", "France", "Greece"];
  list `NewList = [];
  `MyList = ([]);
  `NewList = (add (MyList, "Hungary"));
  return (select (NewList, 0, nil) == "Hungary");
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return "test case add for list finished";
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `MyList = ["Austria", "Belgium", "China", `D_Nation, "England", "France", "Greece"];
  list `NewList = [];
  `NewList = (prepend (MyList, .Hungary));
  return ((size (MyList) == 7) && (select (NewList, 0, nil) == .Hungary));
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return "test case prepend for list finished";
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  term `MyTerm = `Termified (`Austria, `Belgium);
  term `NewTerm = `Termified ();
  return MyTerm;
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  term `MyTerm = `Termified (`Austria, `Belgium);
  term `NewTerm = `Termified ();
  `NewTerm = (add (MyTerm, `China));
  return (((((select (MyTerm, 0, nil) == `Austria) && (select (MyTerm, 1, nil) == `Belgium)) && (select (NewTerm, 0, nil) == `Austria)) && (select (NewTerm, 1, nil) == `Belgium)) && (select (NewTerm, size (MyTerm), nil) == `China));
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  term `MyTerm = `Termified (`Austria, `Belgium);
  term `NewTerm = `Termified ();
  `MyTerm = (`Termified ());
  `NewTerm = (add (MyTerm, `China));
  `NewTerm = (add (NewTerm, `China));
  return (((select (NewTerm, 0, nil) == `China) && (select (NewTerm, 1, nil) == `China)) && (symbolof (MyTerm) == `Termified));
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return "test case add for term finished";
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `SetOne = [0, "Hello world", true];
  list `SetEqual = [select (SetOne, 2, nil), (7 * 0), ("Hello " + "world")];
  list `SetTwo = [., (15 % 5)];
  list `SetDifferent = [3.00000000000000];
  list `ResultSet = [];
  `ResultSet = (union (SetOne, SetOne));
  return (ResultSet == SetOne);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `SetOne = [0, "Hello world", true];
  list `SetEqual = [select (SetOne, 2, nil), (7 * 0), ("Hello " + "world")];
  list `SetTwo = [., (15 % 5)];
  list `SetDifferent = [3.00000000000000];
  list `ResultSet = [];
  `ResultSet = (union (SetOne, SetEqual));
  return ((ResultSet == SetOne) && (ResultSet != SetEqual));
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `SetOne = [0, "Hello world", true];
  list `SetEqual = [select (SetOne, 2, nil), (7 * 0), ("Hello " + "world")];
  list `SetTwo = [., (15 % 5)];
  list `SetDifferent = [3.00000000000000];
  list `ResultSet = [];
  `ResultSet = (union (SetOne, SetTwo));
  return (ResultSet == add (SetOne, select (SetTwo, 0, nil)));
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `SetOne = [0, "Hello world", true];
  list `SetEqual = [select (SetOne, 2, nil), (7 * 0), ("Hello " + "world")];
  list `SetTwo = [., (15 % 5)];
  list `SetDifferent = [3.00000000000000];
  list `ResultSet = [];
  `ResultSet = (union (SetOne, SetDifferent));
  return (ResultSet == add (SetOne, select (SetDifferent, 0, nil)));
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `SetOne = [0, "Hello world", true];
  list `SetEqual = [select (SetOne, 2, nil), (7 * 0), ("Hello " + "world")];
  list `SetTwo = [., (15 % 5)];
  list `SetDifferent = [3.00000000000000];
  list `ResultSet = [];
  `ResultSet = (union (SetDifferent, SetOne));
  return (ResultSet != add (SetOne, select (SetDifferent, 0, nil)));
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return "test case union finished";
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `l1 = ["John", "Paul"];
  list `l2 = ["George", "Ringo"];
  list `r1 = merge (l1, l2);
  list `r2 = ["John", "Paul", "George", "Ringo"];
  return (r1 == r2);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return "test case merge finished";
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
(size (.) == 0)
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
(size (._._._) == 3)
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
(size ("") == 0)
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
(size ("Hello World\n Hello World") == 24)
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  any `v = 0;
  return (foreach (`v, [1, 2, 3], ``{
  return v;
}
) == 3);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return (foreach (`v, [1, 2, 3], ``{
  return v;
}
) == 3);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return (foreach (`v, [1, 2, 3], ``{
  return v;
}
) == 3);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return (filter (`v, [1, 2, 3, 5], ``((v > 2))) == [3, 5]);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  list `MyList = ["Andreas", "Bert", "Charles", "Dean", "Eduard", "Fred"];
  return (filter (`v, MyList, ``((size (v) > 4))) == ["Andreas", "Charles", "Eduard"]);
}
----------------------------------------------------------------------
Parsed:
----------------------------------------------------------------------
{
  return (maplist (`v, [1, 2, 3, 5], ``((v + 1))) == [2, 3, 4, 6]);
}
----------------------------------------------------------------------
