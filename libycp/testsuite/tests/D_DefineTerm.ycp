
# ---------------------------------------------------------
#
#  Filename:    D_DefineTerm.ycp
#
#  Purpose:     test cases for YCP test
#
#  Creator:     jd@suse.de
#
#  Maintainer:  jd@suse.de
#
# ---------------------------------------------------------

"NON-TERMINAL define_term"
# NON-TERMINAL define_term
#
# parsevalue -> YCP_Block -> { statement_list } ->
#                         -> { YCP_Statement } ->
#                         -> { define_term ; }
#
#        define_term -> DEFINE YCP_Symbol ( ) expression
#
{ define AlwaysTrue() true; }			// expression
{ define AlwaysTrue() true; return true; }
{ define AlwaysTrue() false; return true; }	// that's nasty

{
   define AlwaysTrue() true;

   return AlwaysTrue();
}

#
#        define_term -> DEFINE YCP_DeclTerm expression ->
#                    -> DEFINE declterm_prefix , expression YCP_Symbol ) expression ->
#                    -> DEFINE YCP_Symbol ( expression YCP_Symbol, expression YCP_Symbol ) expression ->
#
{ 
  define comparison ( boolean maximum, integer Int1, integer Int2  ) 
      ``{
             if( maximum == true )
             {
                 if( Int1 >= Int2 ) return( Int1 );
                 else return ( Int2 );
             }
             else
             {
                 if( Int1 <= Int2 ) return( Int1 );
                 else return ( Int2 );
             }
         };

  if ( ( comparison( true, 5, 7 ) == comparison( true, 7, 5 ) ) &&
       ( comparison( false, 5, 7 ) == comparison( false, 7, 5 ) ) ) return true;

  return false;
}

# same as above, 'define' has now access to the variables
# that are valid in the scope where the macro is _called_.
{ 
  define comparison ( ) 
      ``{
             if( maximum == true )
             {
                 if( Int1 >= Int2 ) return( Int1 );
                 else return ( Int2 );
             }
             else
             {
                 if( Int1 <= Int2 ) return( Int1 );
                 else return ( Int2 );
             }
         };

  boolean maximum = true;
  if( maximum == true )
  {
     integer Int1 = 5;
     integer Int2 = 7;

     if( Int1 <= Int2 )
     {
         integer Int1 = 6;
         integer Int2 = 8;

         return( comparison() == 8 );
     }
  }

  return false;
}

